---
- name: Dotfiles - Ensure Git is installed
  package:
    name: git
    state: present

- name: Dotfiles - Get home directory
  user:
    name: "{{ dotfiles_user }}"
    state: present
  register: dotfiles_user_registered

- name: Dotfiles - Set checkout if undefined
  set_fact:
    dotfiles_checkout: ['/*']
  when: dotfiles_checkout is undefined

# The ansible.builtin.git module does not seem to support checking out bare repositories, have to do it with shell commands
- name: Dotfiles - Check if directory exists
  stat:
    path: "{{ dotfiles_repo_directory }}"
  register: repo_directory

- name: Dotfiles - Clone repository
  command: "git clone --bare {{ dotfiles_repo }} {{ dotfiles_repo_directory }}"
  become: yes
  become_user: "{{ dotfiles_user }}"
  when: not repo_directory.stat.exists

- name: Dotfiles - Enable sparse checkout
  command: "git --git-dir={{ dotfiles_repo_directory }} --work-tree={{ dotfiles_user_registered.home }} config --local core.sparseCheckout true"
  become: yes
  become_user: "{{ dotfiles_user }}"

- name: Dotfiles - Disable showing untracked files
  command: "git --git-dir={{ dotfiles_repo_directory }} --work-tree={{ dotfiles_user_registered.home }} config --local status.showUntrackedFiles no"
  become: yes
  become_user: "{{ dotfiles_user }}"

# Copy the dotfiles_checkout variable into a file for checkout
- name: Dotfiles - Configure Git sparse checkout
  copy:
    dest: "{{ dotfiles_repo_directory }}/info/sparse-checkout"
    content: "{{ dotfiles_checkout | join('\n') }}"
  become: yes
  become_user: "{{ dotfiles_user }}"

- name: Dotfiles - Checkout Git repository
  command: "git --git-dir={{ dotfiles_repo_directory }} --work-tree={{ dotfiles_user_registered.home }} checkout --force" # This will overwrite existing files!
  become: yes
  become_user: "{{ dotfiles_user }}"

- name: Dotfiles - Pull Git repository
  command: "git --git-dir={{ dotfiles_repo_directory }} --work-tree={{ dotfiles_user_registered.home }} pull"
  become: yes
  become_user: "{{ dotfiles_user }}"

- name: Dotfiles - Update submodules
  command: "git --git-dir={{ dotfiles_repo_directory }} --work-tree={{ dotfiles_user_registered.home }} -C {{ dotfiles_user_registered.home }} submodule update --init --recursive {{ item }}" # Git wants to cd into the directory first before using the submodule command
  become: yes
  become_user: "{{ dotfiles_user }}"
  loop: "{{ dotfiles_checkout | map('regex_replace', '^.*\\/\\*', '~/') | list }}" # Recurse through all files/directories and attempt to recursively clone submodules. Just does nothing if there are none. Regex replace /* to ~/ for compatability with dotfiles_checkout.

